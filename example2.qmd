---
# title: "Beispiel-CheatSheet"
format:
  quarto-cheatsheet-paracol-pdf:
    highlight-style: none
    keep-tex: true
    latex-auto-mk: true
    latex-auto-install: true
    cheat-fontsize: scriptsize
    cheattitle-fontsize: tiny
    body-fontsize: small
    cheat-vspace-above: "-20pt"
    cheat-vspace-below: "-20pt"
    numcols: 4
    use-paracol: true
    geometry:
    - top=1.5cm
    - bottom=1.5cm
    - left=0.2cm
    - right=0.2cm
    - landscape
    # page-margins: "top=10.2cm, bottom=10.2cm, left=10.5cm, right=15.5cm"
    nodecolor: "FF5733"
    linecolor: "C70039"
    headcolor: "FFFFFF"
    textcolor: "000000"
---

## Normal Body Text
## Normal Body Text
## Normal Body Text
## Normal Body Text
## Normal Body Text
## Normal Body Text
## Normal Body Text


::: {.cheat title="Rekursion (1.1)" column="1"}
Rekursion ist eine Technik, bei der eine Funktion sich selbst aufruft.

Beispiel in Python:

```
def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
```
:::


::: {.cheat title="Datenstrukturen (2.1)" column="2"}
Listen, Mengen und Dictionaries sind grundlegende Datenstrukturen.

- Liste: `[1, 2, 3]`
- Set: `{1, 2, 3}`
- Dictionary: `{"a": 1, "b": 2}`
:::

::: {.cheat title="Lambda-Funktionen (2.2)" column="2"}
Anonyme Funktionen:

```
f = lambda x: x * x
print(f(4))  # 16
```
:::

## title3

::: {.cheat title="Rekursion (1.2)" column="1"}
Rekursion ist eine Technik, bei der eine Funktion sich selbst aufruft.

Beispiel in Python:

```
def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
```
:::


::: {.cheat title="Datenstrukturen (2.3)" column="2"}
Listen, Mengen und Dictionaries sind grundlegende Datenstrukturen.

- Liste: `[1, 2, 3]`
- Set: `{1, 2, 3}`
- Dictionary: `{"a": 1, "b": 2}`
:::

::: {.cheat title="Lambda-Funktionen (2.4)" column="2"}
Anonyme Funktionen:

```
f = lambda x: x * x
print(f(4))  # 16
```
:::


::: {.cheat title="Rekursion (1.3)" column="1"}
Rekursion ist eine Technik, bei der eine Funktion sich selbst aufruft.

Beispiel in Python:

```
def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
```
:::


::: {.cheat title="Datenstrukturen (2.5)" column="2"}
Listen, Mengen und Dictionaries sind grundlegende Datenstrukturen.

- Liste: `[1, 2, 3]`
- Set: `{1, 2, 3}`
- Dictionary: `{"a": 1, "b": 2}`
:::

::: {.cheat title="Lambda-Funktionen (2.6)" column="2"}
Anonyme Funktionen:

```
f = lambda x: x * x
print(f(4))  # 16
```
:::


::: {.cheat title="Rekursion (1.4)" column="1"}
Rekursion ist eine Technik, bei der eine Funktion sich selbst aufruft.

Beispiel in Python:

```
def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
```
:::


::: {.cheat title="Datenstrukturen (2.7)" column="2"}
Listen, Mengen und Dictionaries sind grundlegende Datenstrukturen.

- Liste: `[1, 2, 3]`
- Set: `{1, 2, 3}`
- Dictionary: `{"a": 1, "b": 2}`
:::

::: {.cheat title="Lambda-Funktionen (2.8)" column="2"}
Anonyme Funktionen:

```
f = lambda x: x * x
print(f(4))  # 16
```
:::

::: {.cheat title="Rekursion (1.5)" column="1"}
Rekursion ist eine Technik, bei der eine Funktion sich selbst aufruft.

Beispiel in Python:

```
def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
```
:::


::: {.cheat title="Datenstrukturen (2.9)" column="2"}
Listen, Mengen und Dictionaries sind grundlegende Datenstrukturen.

- Liste: `[1, 2, 3]`
- Set: `{1, 2, 3}`
- Dictionary: `{"a": 1, "b": 2}`
:::

::: {.cheat title="Lambda-Funktionen (2.10)" column="2"}
Anonyme Funktionen:

```
f = lambda x: x * x
print(f(4))  # 16
```
:::


::: {.cheat title="Rekursion (1.6)" column="1"}
Rekursion ist eine Technik, bei der eine Funktion sich selbst aufruft.

Beispiel in Python:

```
def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
```
:::


::: {.cheat title="Datenstrukturen (3.1)" column="3"}
Listen, Mengen und Dictionaries sind grundlegende Datenstrukturen.

- Liste: `[1, 2, 3]`
- Set: `{1, 2, 3}`
- Dictionary: `{"a": 1, "b": 2}`
:::

::: {.cheat title="Lambda-Funktionen (3.2)" column="3"}
Anonyme Funktionen:

```
f = lambda x: x * x
print(f(4))  # 16
```
:::

::: {.cheat title="Rekursion (3.3)" column="3"}
Rekursion ist eine Technik, bei der eine Funktion sich selbst aufruft.

Beispiel in Python:

```
def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
```
:::


::: {.cheat title="Datenstrukturen (1.7)" column="1"}
Listen, Mengen und Dictionaries sind grundlegende Datenstrukturen.

- Liste: `[1, 2, 3]`
- Set: `{1, 2, 3}`
- Dictionary: `{"a": 1, "b": 2}`
:::

::: {.cheat title="Lambda-Funktionen (3.4)" column="3"}
Anonyme Funktionen:

```
f = lambda x: x * x
print(f(4))  # 16
```
:::


::: {.cheat title="Rekursion (3.5)" column="3"}
Rekursion ist eine Technik, bei der eine Funktion sich selbst aufruft.

Beispiel in Python:

```
def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
```
:::


::: {.cheat title="Datenstrukturen (1.8)" column="1"}
Listen, Mengen und Dictionaries sind grundlegende Datenstrukturen.

- Liste: `[1, 2, 3]`
- Set: `{1, 2, 3}`
- Dictionary: `{"a": 1, "b": 2}`
:::

::: {.cheat title="Lambda-Funktionen (2.11)" column="2"}
Anonyme Funktionen:

```
f = lambda x: x * x
print(f(4))  # 16
```
:::

::: {.cheat title="Rekursion (3.6)" column="3"}
Rekursion ist eine Technik, bei der eine Funktion sich selbst aufruft.

Beispiel in Python:

```
def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
```
:::


::: {.cheat title="Datenstrukturen (3.7)" column="3"}
Listen, Mengen und Dictionaries sind grundlegende Datenstrukturen.

- Liste: `[1, 2, 3]`
- Set: `{1, 2, 3}`
- Dictionary: `{"a": 1, "b": 2}`
:::

::: {.cheat title="Lambda-Funktionen (1.9)" column="1"}
Anonyme Funktionen:

```
f = lambda x: x * x
print(f(4))  # 16
```
:::


::: {.cheat title="Rekursion (1.10)" column="1"}
Rekursion ist eine Technik, bei der eine Funktion sich selbst aufruft.

Beispiel in Python:

```
def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)
```
:::


::: {.cheat title="Datenstrukturen (2.12)" column="2"}
Listen, Mengen und Dictionaries sind grundlegende Datenstrukturen.

- Liste: `[1, 2, 3]`
- Set: `{1, 2, 3}`
- Dictionary: `{"a": 1, "b": 2}`
:::

::: {.cheat title="Lambda-Funktionen (2.13)" column="2"}
Anonyme Funktionen:

```
f = lambda x: x * x
print(f(4))  # 16
```
:::
